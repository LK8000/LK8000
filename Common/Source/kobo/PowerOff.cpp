/*
 * LK8000 Tactical Flight Computer -  WWW.LK8000.IT
 * Released under GNU/GPL License v.2
 * See CREDITS.TXT file for authors and copyrights
 *
 * File:   PowerOff.cpp
 * Author: Bruno de Lacheisserie
 *
 * Created on April 24, 2016, 12:39 PM
 */

/*
 * Based on XCSoar PowerOff.cpp
 *   XCSoar Glide Computer - http://www.xcsoar.org/
 *   Copyright (C) 2000-2016 The XCSoar Project
 */

#include "Screen/Bitmap.hpp"
#include "Screen/Canvas.hpp"
#include "Screen/Custom/TopCanvas.hpp"
#include "Screen/FreeType/Init.hpp"
#include "Screen/Init.hpp"
#include "Hardware/RotateDisplay.hpp"
#include "DisplayOrientation.hpp"
#include "Kobo/Model.hpp"
#include "utils/stl_utils.h"

#include <unistd.h>

/**************************************************************
 * Only exist for avoid to link with all LK8000 binary source file.
 */
#include "ScreenGeometry.h"
int ScreenScale::screen_scale_int = ScreenScale::radix;

void MSG_ASSERTION(int line, const TCHAR *filename) { assert(false); }
void StartupStore(const TCHAR *Str, ...) { }
/**************************************************************/



const PixelSize bird_size { 15000, 9000 }; 
const RasterPoint bird_polygon[] = {
{179, 172},   {260, 237},   {344, 303},   {425, 369},   {509, 436},   {592, 502},   {674, 568},   {758, 634},   {842, 699},   {926, 763},
{1012, 828},  {1097, 889},  {1183, 951},  {1270, 1010}, {1358, 1070}, {1448, 1126}, {1538, 1181}, {1629, 1234}, {1722, 1286}, {1817, 1335},
{1914, 1383}, {2085, 1467}, {2257, 1554}, {2430, 1639}, {2604, 1725}, {2776, 1812}, {2949, 1898}, {3122, 1985}, {3294, 2075}, {3464, 2166},
{3634, 2260}, {3802, 2355}, {3967, 2454}, {4131, 2555}, {4292, 2660}, {4451, 2769}, {4607, 2882}, {4760, 2999}, {4909, 3121}, {5055, 3248},
{5198, 3383}, {5316, 3494}, {5433, 3610}, {5547, 3726}, {5661, 3845}, {5772, 3966}, {5881, 4088}, {5989, 4211}, {6097, 4336}, {6203, 4460},
{6309, 4587}, {6414, 4712}, {6519, 4838}, {6624, 4963}, {6730, 5089}, {6837, 5214}, {6943, 5338}, {7052, 5462}, {7161, 5584}, {7272, 5704},
{7386, 5824}, {7459, 5877}, {7536, 5918}, {7618, 5948}, {7701, 5967}, {7786, 5978}, {7873, 5982}, {7961, 5981}, {8050, 5977}, {8139, 5971},
{8228, 5963}, {8316, 5956}, {8403, 5951}, {8489, 5952}, {8573, 5958}, {8655, 5971}, {8734, 5993}, {8810, 6026}, {8882, 6071}, {8950, 6130},
{9015, 6205}, {9160, 6169}, {9308, 6134}, {9455, 6099}, {9604, 6066}, {9752, 6032}, {9902, 6002}, {10050, 5972},{10200, 5945},{10350, 5920},
{10501, 5896},{10651, 5877},{10802, 5859},{10952, 5845},{11103, 5833},{11255, 5825},{11406, 5821},{11558, 5820},{11709, 5824},{11861, 5832},
{12014, 5847},{12092, 5859},{12170, 5873},{12248, 5887},{12328, 5903},{12407, 5919},{12484, 5934},{12563, 5950},{12642, 5967},{12720, 5984},
{12799, 6002},{12876, 6020},{12953, 6039},{13031, 6059},{13109, 6079},{13187, 6100},{13263, 6121},{13340, 6142},{13417, 6165},{13493, 6189},
{13571, 6214},{13631, 6233},{13693, 6250},{13755, 6264},{13817, 6276},{13881, 6285},{13944, 6292},{14007, 6297},{14070, 6301},{14134, 6302},
{14199, 6303},{14262, 6304},{14326, 6304},{14390, 6303},{14454, 6301},{14519, 6300},{14582, 6298},{14647, 6298},{14710, 6297},{14773, 6299},
{14839, 6303},{14801, 6343},{14760, 6381},{14717, 6415},{14672, 6446},{14626, 6473},{14579, 6496},{14530, 6517},{14480, 6536},{14430, 6552},
{14377, 6566},{14325, 6577},{14272, 6587},{14218, 6597},{14164, 6604},{14110, 6611},{14056, 6616},{14002, 6621},{13947, 6625},{13893, 6631},
{13839, 6637},{13749, 6643},{13656, 6652},{13563, 6659},{13471, 6666},{13380, 6673},{13287, 6679},{13195, 6684},{13102, 6690},{13011, 6696},
{12918, 6701},{12826, 6704},{12733, 6710},{12642, 6714},{12549, 6719},{12456, 6724},{12364, 6729},{12273, 6734},{12180, 6739},{12087, 6745},
{11994, 6751},{11889, 6748},{11784, 6746},{11679, 6749},{11574, 6754},{11469, 6762},{11365, 6773},{11261, 6784},{11156, 6797},{11052, 6811},
{10947, 6825},{10843, 6839},{10739, 6853},{10635, 6866},{10530, 6878},{10425, 6888},{10321, 6895},{10216, 6902},{10111, 6905},{10007, 6905},
{9899, 6899}, {9836, 6899}, {9773, 6898}, {9710, 6897}, {9646, 6899}, {9582, 6900}, {9518, 6903}, {9455, 6908}, {9392, 6913}, {9328, 6920},
{9265, 6928}, {9202, 6935}, {9138, 6945}, {9076, 6955}, {9014, 6966}, {8950, 6979}, {8889, 6992}, {8827, 7005}, {8765, 7021}, {8704, 7037},
{8641, 7055}, {8611, 7071}, {8581, 7091}, {8552, 7111}, {8524, 7132}, {8496, 7155}, {8470, 7178}, {8443, 7203}, {8418, 7228}, {8393, 7253},
{8367, 7279}, {8343, 7304}, {8318, 7330}, {8293, 7356}, {8267, 7381}, {8242, 7406}, {8216, 7430}, {8189, 7454}, {8162, 7478}, {8134, 7500},
{8104, 7522}, {8030, 7577}, {7954, 7629}, {7876, 7678}, {7796, 7724}, {7714, 7768}, {7632, 7808}, {7547, 7847}, {7462, 7883}, {7377, 7916},
{7288, 7949}, {7201, 7979}, {7113, 8007}, {7025, 8035}, {6935, 8062}, {6846, 8088}, {6757, 8112}, {6668, 8136}, {6578, 8161}, {6489, 8185},
{6399, 8209}, {6369, 8233}, {6338, 8259}, {6308, 8285}, {6277, 8313}, {6246, 8339}, {6217, 8366}, {6187, 8394}, {6157, 8421}, {6127, 8449},
{6096, 8476}, {6066, 8502}, {6036, 8528}, {6004, 8553}, {5972, 8577}, {5939, 8601}, {5906, 8623}, {5871, 8645}, {5837, 8665}, {5801, 8684},
{5762, 8703}, {5738, 8703}, {5711, 8703}, {5687, 8703}, {5660, 8703}, {5633, 8703}, {5609, 8703}, {5582, 8702}, {5557, 8701}, {5531, 8700},
{5504, 8698}, {5479, 8697}, {5453, 8695}, {5427, 8693}, {5402, 8691}, {5376, 8688}, {5350, 8685}, {5325, 8681}, {5299, 8676}, {5274, 8671},
{5247, 8664}, {5203, 8654}, {5160, 8640}, {5118, 8624}, {5078, 8604}, {5038, 8584}, {5001, 8560}, {4965, 8535}, {4930, 8507}, {4896, 8479},
{4861, 8449}, {4830, 8419}, {4797, 8387}, {4766, 8355}, {4735, 8321}, {4703, 8289}, {4673, 8255}, {4642, 8222}, {4611, 8190}, {4580, 8158},
{4547, 8125}, {4567, 8122}, {4588, 8119}, {4608, 8115}, {4629, 8110}, {4650, 8106}, {4670, 8101}, {4691, 8097}, {4710, 8089}, {4730, 8084},
{4751, 8077}, {4770, 8071}, {4790, 8062}, {4808, 8056}, {4829, 8047}, {4848, 8039}, {4867, 8029}, {4886, 8021}, {4904, 8011}, {4922, 8002},
{4943, 7990}, {4964, 7984}, {4985, 7975}, {5007, 7967}, {5029, 7958}, {5051, 7949}, {5072, 7940}, {5093, 7930}, {5115, 7921}, {5136, 7912},
{5158, 7901}, {5178, 7891}, {5199, 7881}, {5219, 7870}, {5240, 7859}, {5261, 7847}, {5281, 7836}, {5301, 7824}, {5320, 7813}, {5341, 7801},
{5362, 7786}, {5402, 7764}, {5441, 7739}, {5480, 7712}, {5516, 7684}, {5551, 7654}, {5585, 7623}, {5617, 7591}, {5649, 7557}, {5680, 7522},
{5710, 7486}, {5738, 7451}, {5767, 7413}, {5794, 7376}, {5821, 7338}, {5848, 7299}, {5874, 7261}, {5900, 7222}, {5925, 7184}, {5951, 7145},
{5978, 7106}, {5961, 7082}, {5944, 7056}, {5927, 7031}, {5912, 7004}, {5899, 6977}, {5885, 6949}, {5874, 6921}, {5862, 6893}, {5852, 6866},
{5842, 6836}, {5834, 6808}, {5825, 6778}, {5817, 6749}, {5811, 6720}, {5805, 6690}, {5799, 6660}, {5794, 6630}, {5788, 6600}, {5784, 6570},
{5778, 6539}, {5733, 6491}, {5684, 6444}, {5636, 6395}, {5586, 6349}, {5536, 6302}, {5487, 6255}, {5437, 6209}, {5387, 6162}, {5337, 6117},
{5286, 6069}, {5238, 6023}, {5188, 5975}, {5140, 5927}, {5092, 5879}, {5045, 5829}, {4998, 5779}, {4954, 5728}, {4909, 5676}, {4867, 5622},
{4825, 5566}, {4747, 5449}, {4666, 5332}, {4585, 5215}, {4503, 5099}, {4420, 4982}, {4337, 4867}, {4251, 4752}, {4164, 4638}, {4078, 4526},
{3987, 4414}, {3897, 4305}, {3803, 4197}, {3708, 4091}, {3611, 3988}, {3511, 3886}, {3409, 3787}, {3304, 3692}, {3195, 3599}, {3085, 3508},
{2970, 3420}, {2850, 3330}, {2729, 3237}, {2608, 3144}, {2488, 3050}, {2369, 2955}, {2249, 2860}, {2132, 2764}, {2013, 2667}, {1898, 2569},
{1782, 2469}, {1667, 2369}, {1554, 2267}, {1442, 2165}, {1331, 2061}, {1220, 1954}, {1112, 1848}, {1006, 1740}, {900, 1629},  {797, 1518},
{693, 1403},  {652, 1352},  {612, 1297},  {576, 1241},  {541, 1183},  {508, 1125},  {478, 1065},  {449, 1004},  {423, 943},   {398, 881},
{374, 818},   {352, 755},   {331, 691},   {310, 626},   {290, 562},   {271, 497},   {253, 432},   {235, 367},   {216, 302},   {199, 238},
{179, 172}
};


static void
Draw(Canvas &canvas)
{
  PixelRect rc = canvas.GetRect();
  rc.Grow(-0.2 * rc.GetSize().cx);
  
  /* draw the banner text with a large font */
  Font small_font;
  small_font.LoadFile("/opt/LK8000/share/fonts/DejaVuSansCondensed.ttf", (rc.GetSize().cy / 25));
  canvas.Select(small_font);
  canvas.SetTextColor(COLOR_BLACK);
  canvas.SetBackgroundTransparent();

  const TCHAR *const text = _T("Powered Off");
  const PixelSize text_size = canvas.CalcTextSize(text);
  const RasterPoint text_pos = {
      rc.left + 16,
      rc.bottom - 16 - text_size.cy
  };
  canvas.DrawText(text_pos.x, text_pos.y, text);
  
  Font big_font;
  big_font.LoadFile("/opt/LK8000/share/fonts/DejaVuSansCondensed-Bold.ttf", (rc.GetSize().cy / 10));
  canvas.Select(big_font);
  
  const TCHAR *const text2 = _T("LK8000");
  const PixelSize text2_size = canvas.CalcTextSize(text2);
  const RasterPoint text2_pos = {
      (rc.left + rc.GetSize().cx + text2_size.cx) / 2,
      (rc.top + (rc.GetSize().cy / 10))
  };
  canvas.DrawText(text2_pos.x, text2_pos.y, text2);
  
  const double Scale = (double)rc.GetSize().cx / (double)bird_size.cx;
  
  RasterPoint polygon[std::size(bird_polygon)] = {};
  std::transform(std::begin(bird_polygon), std::end(bird_polygon), std::begin(polygon), [Scale, rc, text2_size, text2_pos]( const RasterPoint& pt ) {
      return RasterPoint(pt.x*Scale + rc.left, pt.y*Scale + text2_pos.y + text2_size.cy);
  });
  
  canvas.SelectBlackBrush();
  canvas.DrawPolygon(polygon, std::size(polygon));
}

int main(int argc, char** argv) {
  /* enable FreeType anti-aliasing, because we don't use dithering in
     this program */
  FreeType::mono = false;

  ScreenGlobalInit screen_init;

  Font::Initialise();
  Display::Rotate(DisplayOrientation_t::PORTRAIT);

  {
    TopCanvas screen;
    screen.Create(PixelSize(100, 100), true, false);

    Canvas canvas = screen.Lock();
    if (canvas.IsDefined()) {
      /* all black first, to eliminate E-ink ghost images */
      canvas.Clear(COLOR_BLACK);
      screen.Flip();
      screen.Wait();

      /* disable dithering, render with 16 shades of gray, to make the
         (static) display more pretty */
      screen.SetEnableDither(false);

      /* draw the picture */
      canvas.ClearWhite();
      Draw(canvas);

      /* finish */
      screen.Unlock();
      screen.Flip();
      screen.Wait();
    }
  }

  /* now we can power off the Kobo; the picture remains on the
     screen */
  if (DetectKoboModel() == KoboModel::GLOHD)
    //The GloHD needs -f to not clear screen
    execl("/sbin/poweroff", "poweroff", "-f", nullptr);
  else
    execl("/sbin/poweroff", "poweroff", nullptr);

  return 0;
}

