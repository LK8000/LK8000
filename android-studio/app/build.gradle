buildscript {
    repositories {
        google()
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.31.2'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    google()
    maven { url 'https://maven.fabric.io/public' }
}

android {
    compileSdkVersion 28
    ndkVersion "21.2.6472646"

    defaultConfig {
        applicationId "org.lk8000"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 61
        versionName "7.1o"
        setProperty("archivesBaseName", "LK8000-$versionName")
        manifestPlaceholders = [
                applicationLabel: "@string/app_name",
                applicationIcon: "@drawable/icon"
        ]

        externalNativeBuild {
            cmake {
                // Passes optional arguments to CMake.
                arguments "-DANDROID_ARM_NEON=TRUE"

                // Sets a flag to enable format macro constants for the C compiler.
                cFlags "-D__STDC_FORMAT_MACROS"

                // Sets optional flags for the C++ compiler.
                cppFlags "-fexceptions", "-frtti", "-std=c++17"
            }
        }
    }
    sourceSets {
        main {
            java.srcDirs += ["../../android/src"]
            manifest.srcFile "../../android/AndroidManifest.xml"
            res.srcDirs = ["src/main/res",
                           "../../android/res"]
        }
    }
    buildTypes {
        release {
            minifyEnabled false

            // play store identify app using <applicationId, signing certificat> pair
            // we can't change this is because first distrib on play Store has been made with this suffix
            applicationIdSuffix ".beta"

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            applicationIdSuffix ".debug"
            manifestPlaceholders = [
                    applicationLabel: "@string/app_name_debug",
                    applicationIcon: "@drawable/icon_debug"
            ]
            sourceSets {
                debug {
                    res.srcDirs = ["src/main/res",
                                   "../../android/res",
                                   "../../android/res_debug"]
                }
            }
            debuggable true
            jniDebuggable true
            renderscriptDebuggable true

            externalNativeBuild {
                cmake {
                    cFlags "-DANDROID_VARIANT_DEBUG"
                    cppFlags "-DANDROID_VARIANT_DEBUG"
                }
            }

        }
        beta {
            initWith(buildTypes.release)

            applicationIdSuffix ".test"
            manifestPlaceholders = [
                    applicationLabel: "@string/app_name_beta",
                    applicationIcon: "@drawable/icon_beta"
            ]
            sourceSets {
                beta {
                    res.srcDirs = ["src/main/res",
                                   "../../android/res",
                                   "../../android/res_beta"]
                }
            }

            externalNativeBuild {
                cmake {
                    cFlags "-DANDROID_VARIANT_BETA"
                    cppFlags "-DANDROID_VARIANT_BETA"
                }
            }
        }
    }
    externalNativeBuild {
        cmake {
            path "../../CMakeLists.txt"
        }
    }
    android {
        compileOptions {
            sourceCompatibility 1.8
            targetCompatibility 1.8
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation('com.crashlytics.sdk.android:crashlytics:2.10.1@aar') {
        transitive = true
    }
    implementation('com.crashlytics.sdk.android:crashlytics-ndk:2.1.1@aar') {
        transitive = true
    }
    implementation 'com.android.support:support-compat:28.0.0'
    implementation 'com.github.ytai.ioio:IOIOLibAndroidBluetooth:5.07'
    implementation 'com.github.ytai.ioio:IOIOLibAndroidAccessory:5.07'
    implementation 'com.github.ytai.ioio:IOIOLibAndroidDevice:5.07'
    implementation 'com.github.felHR85:UsbSerial:6.0.5'

    implementation 'com.onyx.android.sdk:epdcontroller:0.1.0'
}

crashlytics {
    enableNdk true
    manifestPath '../../android/AndroidManifest.xml'
}

clean() {
    delete "src/main/assets/language",
           "src/main/assets/distribution",
           "src/main/assets/fonts",
           "src/main/assets/polars",
           "src/main/assets/sounds",
           "src/main/assets/CREDITS.TXT",
           "src/main/assets/DEFAULT_MENU.TXT"
}

task syncAsset(type: Sync) {
    from "../../Common/Data/Language",
            "../../Common/Distribution/LK8000/_System/"
    into "src/main/assets"
    include "DEFAULT_MENU.TXT",
            "CREDITS.TXT"
    preserve {
        include "bitmaps/**"
    }
}
task syncAssetLanguages(type: Sync) {
    from "../../Common/Data/Language/Translations",
         "../../Common/Data/Language"
    into "src/main/assets/language"
    include "*.json"
}
task syncAssetPolars(type: Sync) {
    from "../../Common/Distribution/LK8000/_Polars"
    into "src/main/assets/polars"
    include "*.plr"
    exclude "Example.*"
}
task syncAssetSounds(type: Sync) {
    from "../../Common/Data/Sounds",
         "../../Common/Distribution/LK8000/_System/_Sounds",
         "../../Common/Distribution/LK8000/_System/_Sounds/OPTIONALS"
    into "src/main/assets/sounds"
    include "*.wav",
            "*.WAV"
}
task syncAssetFonts(type: Sync) {
    from "../../Common/Data/Fonts"
    into "src/main/assets/fonts"
    include "*.ttf"
}
task syncAssetDistribtionMaps(type: Sync) {
    from "../../Common/Distribution/LK8000/_Maps"
    into "src/main/assets/distribution/maps"
}
task syncAssetDistribtionWaypoints(type: Sync) {
    from "../../Common/Distribution/LK8000/_Waypoints"
    into "src/main/assets/distribution/waypoints"
}
task syncAssetDistribtionAirspaces(type: Sync) {
    from "../../Common/Distribution/LK8000/_Airspaces"
    into "src/main/assets/distribution/airspaces"
}
task syncAssetDistribtionTasks(type: Sync) {
    from "../../Common/Distribution/LK8000/_Tasks"
    into "src/main/assets/distribution/tasks"
}
task syncAssetDistribtionLogger(type: Sync) {
    from "../../Common/Distribution/LK8000/_Logger"
    into "src/main/assets/distribution/logger"
}
task syncAssetDistribtionConfiguration(type: Sync) {
    from "../../Common/Distribution/LK8000/_Configuration"
    into "src/main/assets/distribution/configuration"
    include "DEMO.prf",
            "CAR.prf",
            "TREKKING.prf", 
            "NOTEDEMO.TXT",
            "IDFLARM.TXT"
}
task syncAssetDistribtionPolars(type: Sync) {
    from "../../Common/Distribution/LK8000/_Polars"
    into "src/main/assets/distribution/polars"
    include "Example.*"
}

preBuild.dependsOn(syncAsset)
preBuild.dependsOn(syncAssetLanguages)
preBuild.dependsOn(syncAssetPolars)
preBuild.dependsOn(syncAssetSounds)
preBuild.dependsOn(syncAssetFonts)
preBuild.dependsOn(syncAssetDistribtionMaps)
preBuild.dependsOn(syncAssetDistribtionWaypoints)
preBuild.dependsOn(syncAssetDistribtionAirspaces)
preBuild.dependsOn(syncAssetDistribtionTasks)
preBuild.dependsOn(syncAssetDistribtionLogger)
preBuild.dependsOn(syncAssetDistribtionConfiguration)
preBuild.dependsOn(syncAssetDistribtionPolars)
